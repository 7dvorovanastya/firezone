name: CI
on:
  - push
defaults:
  run:
    shell: bash

jobs:
  unit-integration-test:
    runs-on: ubuntu-18.04
    env:
      MIX_ENV: test
      POSTGRES_HOST: localhost
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MATRIX_OS: ubuntu-18.04
      arch: amd64
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Install package dependencies
        run: sudo apt-get install net-tools wireguard unzip
      - uses: actions/checkout@v2
      - name: Install Runtimes
        run: .ci/install_runtimes.sh
      - name: Install Dependencies
        run: .ci/install_dependencies.sh
      - name: Setup Database
        run: |
          mix ecto.create
          mix ecto.migrate
      - name: Run Tests and Upload Coverage Report
        run: mix coveralls.github --umbrella
      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test screenshots
          path: apps/cf_http/screenshots

  build-linux:
    needs: unit-integration-test
    runs-on: ubuntu-18.04
    name: Build on {{ matrix.arch }}
    env:
      arch: ${{ matrix.arch }}
      MIX_ENV: prod
    strategy:
      matrix:
        include:
          - arch: amd64
          - arch: arm64
    steps:
      - name: Install package dependencies
        run: sudo apt-get install zstd
      - uses: actions/checkout@v2

      # arm64 build
      - uses: uraimo/run-on-arch-action@v2.0.10
        if: ${{ matrix.arch == 'arm64' }}
        name: Run on arm64
        env:
          arch: arm64
        with:
          arch: aarch64
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          install: .ci/install_runtimes.sh
          run: .ci/build_release.sh

      # amd64 build
      - if: ${{ matrix.arch == 'amd64' }}
        run: .ci/install_runtimes.sh
      - if: ${{ matrix.arch == 'amd64' }}
        run: .ci/build_release.sh

  # build:
  #   needs: unit-integration-test
  #   runs-on: ubuntu-18.04
  #   strategy:
  #     matrix:
  #       os: [ubuntu-18.04]
  #   env:
  #     MATRIX_OS: ${{ matrix.os }}
  #   steps:
  #     - name: Install runtimes
  #       run: .ci/install_runtimes.sh
  #     - name: Build release
  #       env:
  #           MIX_ENV: prod
  #       run: .ci/build_release.sh
  #     - name: Build deb
  #       run: .ci/build_deb.sh
  #     - name: Rename Built Artifacts
  #       run: .ci/rename_artifacts.sh
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: cloudfire-deb
  #         path: "cloudfire*.deb"


  # functional-test:
  #   needs: build-linux
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04]
  #   env:
  #     MATRIX_OS: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: cloudfire-deb
  #     - name: Test Install package
  #       env:
  #         DEBIAN_FRONTEND: noninteractive
  #       run: .ci/functional_test.sh
  #
  # publish:
  #   needs: functional-test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04]
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
  #   steps:
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: true
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: cloudfire-deb
  #     - name: Upload Release Asset
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./cloudfire_${{ github.sha }}-1_${{ matrix.os }}_amd64.deb
  #         asset_name: cloudfire_${{ matrix.os }}_amd64.deb
  #         asset_content_type: application/vnd.debian.binary-package
