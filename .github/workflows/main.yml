# Steps:
# 1. Unit/Integration Tests
# 2. Build and Push App Image
# 3. Functional Test
name: Test
on:
  - push
defaults:
  run:
    shell: bash
jobs:
  # 1. Unit/Integration Test
  unit-integration-test:
    runs-on: ubuntu-18.04
    env:
      MIX_ENV: test
      POSTGRES_HOST: localhost
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    services:
      postgres:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: fireguard
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Install Runtimes
        uses: actions/setup-elixir@v1
        with:
          elixir-version: "1.11.1"
          otp-version: "23.1.1"
      - name: Install Dependencies
        run: mix deps.get --only test
      - name: Setup Database
        run: |
          mix ecto.create
          mix ecto.migrate

      - name: Run Tests and Upload Coverage Report
        run: mix coveralls.github --umbrella

  # 2. Functional Test
  functional-test:
    needs: unit-integration-test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Functional Test
        run: |
          echo 'Tests completed!'
  build-deb:
    needs: functional-test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Runtimes
        uses: actions/setup-elixir@v1
        with:
          elixir-version: "1.11.1"
          otp-version: "23.1.1"
      - name: Build packages
        run: which docker
      - name: upload package
        uses: actions/upload-artifact@v2
        with:
          name: fireguard_deb
          path: fireguard_0.1.0-1_amd64.deb
  publish:
    runs-on: ubuntu-18.04
    needs: build-deb
    if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master')
    steps:
      - name: Download Built Packages
        uses: actions/download-artifact@v2
        with:
          name: fireguard_deb
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./fireguard_0.1.0-1_amd64.deb
          asset_name: fireguard_0.1.0-1_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
