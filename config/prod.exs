import Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :fg_vpn, :server_process_opts, name: :fg_vpn_server

config :fg_http, FgHttpWeb.Endpoint,
  cache_static_manifest: "priv/static/cache_manifest.json",
  https: [
    versions: [:"tlsv1.2", :"tlsv1.1", :tlsv1],
    ciphers: [
      'ECDHE-ECDSA-AES256-GCM-SHA384',
      'ECDHE-RSA-AES256-GCM-SHA384',
      'ECDHE-ECDSA-AES256-SHA384',
      'ECDHE-RSA-AES256-SHA384',
      'ECDHE-ECDSA-DES-CBC3-SHA',
      'ECDH-ECDSA-AES256-GCM-SHA384',
      'ECDH-RSA-AES256-GCM-SHA384',
      'ECDH-ECDSA-AES256-SHA384',
      'ECDH-RSA-AES256-SHA384',
      'DHE-DSS-AES256-GCM-SHA384',
      'DHE-DSS-AES256-SHA256',
      'AES256-GCM-SHA384',
      'AES256-SHA256',
      'ECDHE-ECDSA-AES128-GCM-SHA256',
      'ECDHE-RSA-AES128-GCM-SHA256',
      'ECDHE-ECDSA-AES128-SHA256',
      'ECDHE-RSA-AES128-SHA256',
      'ECDH-ECDSA-AES128-GCM-SHA256',
      'ECDH-RSA-AES128-GCM-SHA256',
      'ECDH-ECDSA-AES128-SHA256',
      'ECDH-RSA-AES128-SHA256',
      'DHE-DSS-AES128-GCM-SHA256',
      'DHE-DSS-AES128-SHA256',
      'AES128-GCM-SHA256',
      'AES128-SHA256',
      'ECDHE-ECDSA-AES256-SHA',
      'ECDHE-RSA-AES256-SHA',
      'DHE-DSS-AES256-SHA',
      'ECDH-ECDSA-AES256-SHA',
      'ECDH-RSA-AES256-SHA',
      'AES256-SHA',
      'ECDHE-ECDSA-AES128-SHA',
      'ECDHE-RSA-AES128-SHA',
      'DHE-DSS-AES128-SHA',
      'ECDH-ECDSA-AES128-SHA',
      'ECDH-RSA-AES128-SHA',
      'AES128-SHA'
    ],
    secure_renegotiate: true,
    reuse_sessions: true,
    honor_cipher_order: true,
    port: 8800,
    transport_options: [max_connections: :infinity, socket_opts: [:inet6]],
    otp_app: :fireguard,
    # overridden by release config
    keyfile: "/opt/fireguard/ssl/key.pem",
    # overridden by release config
    certfile: "/opt/fireguard/ssl/cert.pem"
  ],
  # changed by release config
  secret_key_base: "dummy",
  # changed by release config
  live_view: [signing_salt: "dummy"],
  server: true,
  force_ssl: [rewrite_on: [:x_forwarded_proto], hsts: true, host: nil]

config :fg_vpn,
  cli: FgVpn.CLI.Live

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :fg_http, FgHttpWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH"),
#         transport_options: [socket_opts: [:inet6]]
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :fg_http, FgHttpWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Finally import the config/prod.secret.exs which loads secrets
# and configuration from environment variables.
